<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>dev.protsenko.security-linter</id>

    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <name>Infrastructure Security Linter</name>

    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor email="tech@protsenko.dev" url="https://protsenko.dev">Dmitry Protsenko</vendor>

    <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
    <depends>com.intellij.modules.platform</depends>
    <depends>Docker</depends>
    <depends>org.jetbrains.plugins.yaml</depends>

    <resource-bundle>messages.SecurityPluginBundle</resource-bundle>

    <extensions defaultExtensionNs="com.intellij">
        <localInspection
                implementationClass="dev.protsenko.securityLinter.docker.inspection.cmd_and_entrypoint.DockerfileCmdAndEntrypointInspection"
                displayName="CMD and ENTRYPOINT best practices"
                groupPathKey="common.group-key" groupKey="common.docker-group-key" language="Dockerfile"
                enabledByDefault="true"/>

        <localInspection
                implementationClass="dev.protsenko.securityLinter.docker.inspection.copy_and_add.DockerfileCopyAndAddInspection"
                displayName="COPY and ADD best practices"
                groupPathKey="common.group-key" groupKey="common.docker-group-key" language="Dockerfile"
                enabledByDefault="true"/>

        <localInspection
                implementationClass="dev.protsenko.securityLinter.docker.inspection.env.DockerFileEnvInspection"
                displayName="ENV best practices"
                groupPathKey="common.group-key" groupKey="common.docker-group-key" language="Dockerfile"
                enabledByDefault="true"/>

        <localInspection
                implementationClass="dev.protsenko.securityLinter.docker.inspection.expose.DockerfileExposeInspection"
                displayName="EXPOSE best practices"
                groupPathKey="common.group-key" groupKey="common.docker-group-key" language="Dockerfile"
                enabledByDefault="true"/>

        <localInspection
                implementationClass="dev.protsenko.securityLinter.docker.inspection.from.DockerfileFromInspection"
                displayName="FROM best practices"
                groupPathKey="common.group-key" groupKey="common.docker-group-key" language="Dockerfile"
                enabledByDefault="true"/>

        <localInspection
                implementationClass="dev.protsenko.securityLinter.docker.inspection.healthcheck.DockerfileHealthCheckInspection"
                displayName="HEALTHCHECK best practices"
                groupPathKey="common.group-key" groupKey="common.docker-group-key" language="Dockerfile"
                enabledByDefault="true"/>

        <localInspection
                implementationClass="dev.protsenko.securityLinter.docker.inspection.maintainer.DockerfileMaintainerInspection"
                displayName="Deprecated MAINTAINER used"
                groupPathKey="common.group-key" groupKey="common.docker-group-key" language="Dockerfile"
                enabledByDefault="true"/>

        <localInspection
                implementationClass="dev.protsenko.securityLinter.docker.inspection.run.DockerfileRunInspection"
                displayName="RUN best practices"
                groupPathKey="common.group-key" groupKey="common.docker-group-key" language="Dockerfile"
                enabledByDefault="true"/>

        <localInspection
                implementationClass="dev.protsenko.securityLinter.docker.inspection.user.DockerfileUserInspection"
                displayName="USER best practices"
                groupPathKey="common.group-key" groupKey="common.docker-group-key" language="Dockerfile"
                enabledByDefault="true"/>

        <localInspection
                implementationClass="dev.protsenko.securityLinter.docker.inspection.workdir.DockerfileWorkdirInspection"
                displayName="WORKDIR best practices"
                groupPathKey="common.group-key" groupKey="common.docker-group-key" language="Dockerfile"
                enabledByDefault="true"/>

        <localInspection
                implementationClass="dev.protsenko.securityLinter.docker_compose.DockerComposeInspection"
                displayName="Docker Compose best practices"
                groupPathKey="common.group-key" groupKey="common.docker-compose-group-key"
                enabledByDefault="true" language="yaml"/>

        <notificationGroup id="dev.protsenko.securityLinter" displayType="BALLOON" key="common.notification-group"/>
    </extensions>

    <extensions defaultExtensionNs="dev.protsenko.security-linter">
        <dockerFileRunAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.run.impl.PackageManagerAutoYesAnalyzer"/>
        <dockerFileRunAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.run.impl.AptGetNoInstallRecommendsAnalyzer"/>
        <dockerFileRunAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.run.impl.ArgumentsInRunCommandAnalyzer"/>
        <dockerFileRunAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.run.impl.CurlBashingAnalyzer"/>
        <dockerFileRunAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.run.impl.DistUpgradeAnalyzer"/>
        <dockerFileRunAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.run.impl.MissingDnfCleanAnalyzer"/>
        <dockerFileRunAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.run.impl.PackageManagerUpdateWithoutInstallAnalyzer"/>
        <dockerFileRunAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.run.impl.SudoIsUsedAnalyzer"/>
        <dockerFileRunAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.run.impl.UsingCdToChangeDirectoryAnalyzer"/>
        <dockerFileRunAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.run.impl.YumInstallWithoutCleanAnalyzer"/>
        <dockerFileRunAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.run.impl.ZypperInstallWithoutCleanAnalyzer"/>

        <dockerFileExposeAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.expose.impl.SshPortExposedAnalyzer"/>
        <dockerFileExposeAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.expose.impl.ExposedPortOutOfRangeAnalyzer"/>

        <dockerFileCopyOrAddAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.copy_and_add.impl.CopyReferringToCurrentImageAnalyzer"/>
        <dockerFileCopyOrAddAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.copy_and_add.impl.UseSlashForCopyArgsAnalyzer"/>
        <dockerFileCopyOrAddAnalyzer implementation="dev.protsenko.securityLinter.docker.inspection.copy_and_add.impl.DockerfileAddInspection"/>
    </extensions>

    <extensionPoints>
        <extensionPoint name="dockerFileRunAnalyzer" dynamic="true"
                        interface="dev.protsenko.securityLinter.docker.inspection.run.core.DockerfileRunAnalyzer"/>
        <extensionPoint name="dockerFileExposeAnalyzer" dynamic="true"
                        interface="dev.protsenko.securityLinter.docker.inspection.expose.core.DockerfileExposeAnalyzer"/>
        <extensionPoint name="dockerFileCopyOrAddAnalyzer" dynamic="true"
                        interface="dev.protsenko.securityLinter.docker.inspection.copy_and_add.core.DockerfileCopyOrAddAnalyzer"/>
    </extensionPoints>

</idea-plugin>